
/*!
<auto-generated>
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
</auto-generated>
*/

pub mod prelude {
    pub use crate::*;
    pub use crate::item::*;
    pub use crate::test::*;
}

#[derive(Debug)]
pub enum LubanError {
    Loader(String),
    Table(String),
    Bean(String),
    Polymorphic(String),
    Unknown(String),
}

impl std::fmt::Display for LubanError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(match self {
            LubanError::Loader(msg) |
            LubanError::Table(msg) |
            LubanError::Bean(msg) |
            LubanError::Polymorphic(msg) |
            LubanError::Unknown(msg) => msg,
        })
    }
}

pub struct Tables{
    pub TbItem: std::sync::Arc<crate::item::TbItem>,
}

impl Tables {
    pub fn new<T: Fn(&str) -> Result<ByteBuf, LubanError>>(loader: T) -> Result<Tables, LubanError> {
        let mut tables =Tables{
            TbItem: crate::item::TbItem::new(loader("item_tbitem")?)?,
        };
        unsafe { tables.resolve_ref(); }
        Ok(tables)
    }

    unsafe fn resolve_ref(&mut self) {
        let mut b = Box::from_raw(self.TbItem.as_ref() as *const crate::item::TbItem as *mut crate::item::TbItem); b.as_mut().resolve_ref(self); let _ = Box::into_raw(b);
    }
}
pub mod item;
pub mod test;

use luban_lib::*;

#[derive(Debug)]
pub struct vector2 {
    pub x: f32,
    pub y: f32,
}

impl vector2{
    pub(crate) fn new(mut buf: &mut ByteBuf) -> Result<vector2, LubanError> {
        let x = buf.read_float();
        let y = buf.read_float();
        
        Ok(vector2 { x, y, })
    }    

    pub(crate) unsafe fn resolve_ref(&mut self, tables: &Tables) {
    }

    pub const __ID__: i32 = 337790799;
}

#[derive(Debug)]
pub struct vector3 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}

impl vector3{
    pub(crate) fn new(mut buf: &mut ByteBuf) -> Result<vector3, LubanError> {
        let x = buf.read_float();
        let y = buf.read_float();
        let z = buf.read_float();
        
        Ok(vector3 { x, y, z, })
    }    

    pub(crate) unsafe fn resolve_ref(&mut self, tables: &Tables) {
    }

    pub const __ID__: i32 = 337790800;
}

#[derive(Debug)]
pub struct vector4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}

impl vector4{
    pub(crate) fn new(mut buf: &mut ByteBuf) -> Result<vector4, LubanError> {
        let x = buf.read_float();
        let y = buf.read_float();
        let z = buf.read_float();
        let w = buf.read_float();
        
        Ok(vector4 { x, y, z, w, })
    }    

    pub(crate) unsafe fn resolve_ref(&mut self, tables: &Tables) {
    }

    pub const __ID__: i32 = 337790801;
}


