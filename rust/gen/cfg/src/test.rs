
/*!
<auto-generated>
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
</auto-generated>
*/


use super::*;
use luban_lib::*;

bitflags::bitflags! {    
    #[derive(Debug, Hash, Eq, PartialEq)]
    pub struct AccessFlag : u32 {
        const WRITE = 1;
        const READ = 2;
        const TRUNCATE = 4;
        const NEW = 8;
        ///位标记使用示例
        const READ_WRITE = 3;
    }
}
#[derive(Debug)]
pub enum Shape {
    Circle(std::sync::Arc<crate::test::Circle>),
    Rectangle(std::sync::Arc<crate::test::Rectangle>),
}

impl Shape {
    pub(crate) fn new(mut buf: &mut ByteBuf) -> Result<Self, LubanError> {
        let type_id = buf.read_int();
        match type_id {
            crate::test::Circle::__ID__ => Ok(Self::Circle(std::sync::Arc::new(crate::test::Circle::new(buf)?))),
            crate::test::Rectangle::__ID__ => Ok(Self::Rectangle(std::sync::Arc::new(crate::test::Rectangle::new(buf)?))),
            _ => Err(LubanError::Bean(format!("Invalid type for Shape:{}", type_id)))
        }
    }

    pub(crate) unsafe fn resolve_ref(&mut self, tables: &Tables) {
        match self {
            Self::Circle(ref mut x) => { let mut b = Box::from_raw(x.as_ref() as *const crate::test::Circle as *mut crate::test::Circle); b.as_mut().resolve_ref(tables); let _ = Box::into_raw(b); }
            Self::Rectangle(ref mut x) => { let mut b = Box::from_raw(x.as_ref() as *const crate::test::Rectangle as *mut crate::test::Rectangle); b.as_mut().resolve_ref(tables); let _ = Box::into_raw(b); }
        }
    }
}


#[derive(Debug)]
pub struct Circle {
    /// 半径
    pub radius: f32,
}

impl Circle{
    pub(crate) fn new(mut buf: &mut ByteBuf) -> Result<Circle, LubanError> {
        let radius = buf.read_float();
        
        Ok(Circle { radius, })
    }    

    pub(crate) unsafe fn resolve_ref(&mut self, tables: &Tables) {
    }

    pub const __ID__: i32 = 2131829196;
}

#[derive(Debug)]
pub struct Rectangle {
    /// 宽度
    pub width: f32,
    /// 高度
    pub height: f32,
}

impl Rectangle{
    pub(crate) fn new(mut buf: &mut ByteBuf) -> Result<Rectangle, LubanError> {
        let width = buf.read_float();
        let height = buf.read_float();
        
        Ok(Rectangle { width, height, })
    }    

    pub(crate) unsafe fn resolve_ref(&mut self, tables: &Tables) {
    }

    pub const __ID__: i32 = -31893773;
}

#[derive(Debug)]
pub struct TestExcelBean1 {
    /// 最高品质
    pub x1: i32,
    /// 黑色的
    pub x2: String,
    /// 蓝色的
    pub x3: i32,
    /// 最差品质
    pub x4: f32,
}

impl TestExcelBean1{
    pub(crate) fn new(mut buf: &mut ByteBuf) -> Result<TestExcelBean1, LubanError> {
        let x1 = buf.read_int();
        let x2 = buf.read_string();
        let x3 = buf.read_int();
        let x4 = buf.read_float();
        
        Ok(TestExcelBean1 { x1, x2, x3, x4, })
    }    

    pub(crate) unsafe fn resolve_ref(&mut self, tables: &Tables) {
    }

    pub const __ID__: i32 = -1738345160;
}

#[derive(Debug)]
pub struct TestExcelBean2 {
    /// 最高品质
    pub y1: i32,
    /// 黑色的
    pub y2: String,
    /// 蓝色的
    pub y3: f32,
}

impl TestExcelBean2{
    pub(crate) fn new(mut buf: &mut ByteBuf) -> Result<TestExcelBean2, LubanError> {
        let y1 = buf.read_int();
        let y2 = buf.read_string();
        let y3 = buf.read_float();
        
        Ok(TestExcelBean2 { y1, y2, y3, })
    }    

    pub(crate) unsafe fn resolve_ref(&mut self, tables: &Tables) {
    }

    pub const __ID__: i32 = -1738345159;
}


